package com.example.cameraappimport android.Manifestimport android.content.ContentValuesimport android.content.pm.PackageManagerimport android.os.Buildimport android.os.Bundleimport android.provider.MediaStoreimport android.util.Logimport android.widget.Toastimport androidx.activity.result.contract.ActivityResultContractsimport androidx.appcompat.app.AppCompatActivityimport androidx.camera.core.CameraSelectorimport androidx.camera.core.ImageCaptureimport androidx.camera.core.ImageCaptureExceptionimport androidx.camera.core.Previewimport androidx.camera.lifecycle.ProcessCameraProviderimport androidx.core.content.ContextCompatimport com.example.cameraapp.databinding.ActivityMainBindingimport java.lang.Exceptionimport java.text.SimpleDateFormatimport java.util.Localeimport java.util.concurrent.ExecutorServiceimport java.util.concurrent.Executorstypealias LumaListener = (luma: Double) -> Unitclass MainActivity : AppCompatActivity() {    private lateinit var viewBinding: ActivityMainBinding    private lateinit var cameraExecutorService: ExecutorService    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        viewBinding = ActivityMainBinding.inflate(layoutInflater)        setContentView(viewBinding.root)        cameraExecutorService = Executors.newSingleThreadExecutor()        requestPermission()    }    private fun requestPermission() {        requestCameraPermissionIfMissing{ granted->            if(granted){                startCamera()            }else{                Toast.makeText(this,"please Allow Camera",Toast.LENGTH_SHORT) .show()            }        }    }    private  fun requestCameraPermissionIfMissing(onResult: ((Boolean)-> Unit)){        if(ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)==PackageManager.PERMISSION_GRANTED){            onResult(true)        }else{            registerForActivityResult(ActivityResultContracts.RequestPermission()){                onResult(it)            }.launch(Manifest.permission.CAMERA)        }    }    private fun startCamera() {        val processCameraProvider = ProcessCameraProvider.getInstance(this)        processCameraProvider.addListener({            try{                val cameraProvider = processCameraProvider.get( )                val previewUseCase = Preview.Builder().build()                previewUseCase.setSurfaceProvider(viewBinding.viewFinder.surfaceProvider)                cameraProvider.unbindAll()                cameraProvider.bindToLifecycle(this,CameraSelector.DEFAULT_BACK_CAMERA,previewUseCase)            }catch (e : Exception){                runOnUiThread {                    Toast.makeText(this, "Error $e", Toast.LENGTH_SHORT).show()                    Log.d("8820",e.toString())                }            }        },ContextCompat.getMainExecutor(this))    }}